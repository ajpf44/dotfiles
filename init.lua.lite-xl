-- put user settings here
-- this module will be loaded after everything else when the application starts
-- it will be automatically reloaded when saved

local core = require "core"
local keymap = require "core.keymap"
local config = require "core.config"
local style = require "core.style"
local lspconfig = require "plugins.lsp.config"
local command = require "core.command"

-- Custom commands

-- launch terminal
local function launch_terminal()
	return os.execute("gnome-terminal")
end
command.add(nil, {["core:open-terminal"] = launch_terminal})

-- default c file template v2
-- apaga o que estiver noa arquivo e
-- escreve o template dentro do arquivo

local template = "#include <stdio.h>\n\nint main(int argc, char** argv){\n\n  return 0;\n}"

local function c_default_template(dv)
  command.perform "doc:select-all"
  command.perform "doc:delete"
  dv.doc:insert(0,0, template)
end

command.add("core.docview", {["core:c-default-template"] = c_default_template})

-- default c file template v1
-- roda um comando sh e preenche oa arquivo
--[[ 
local function filename_predicate()
  local filename = core.active_view.doc.filename
  return true, filename
end

local function c_default_template(filename)
  local cmd = "c-default-file.sh " .. filename
	return os.execute(cmd)
end

command.add(filename_predicate, {["core:default-c-file"] = c_default_template}) ]]

lspconfig.jsonls.setup()
lspconfig.clangd.setup()

------------------------------ Themes ----------------------------------------

-- light theme:
-- core.reload_module("colors.summer")

--------------------------- Key bindings -------------------------------------

-- key binding:
-- keymap.add { ["ctrl+escape"] = "core:quit" }

-- pass 'true' for second parameter to overwrite an existing binding
-- keymap.add({ ["ctrl+pageup"] = "root:switch-to-previous-tab" }, true)
-- keymap.add({ ["ctrl+pagedown"] = "root:switch-to-next-tab" }, true)


keymap.add{ ["ctrl+t" ] = "core:open-terminal" }

------------------------------- Fonts ----------------------------------------

-- customize fonts:
-- style.font = renderer.font.load(DATADIR .. "/fonts/FiraSans-Regular.ttf", 14 * SCALE)
-- style.code_font = renderer.font.load(DATADIR .. "/fonts/JetBrainsMono-Regular.ttf", 14 * SCALE)
-- style.code_font = renderer.font.group {
--    renderer.font.load("/usr/share/fonts/truetype/ubuntu/UbuntuMono-R.ttf", 20 * SCALE)
--  }

style.code_font = renderer.font.group {
   renderer.font.load("/home/ajpf/.local/share/fonts/JetBrainsMono-Regular.ttf", 20 * SCALE)
 }

config.indent_size = 2 -- set indentation to 4
config.tab_type = "soft"      -- "soft" for spaces, "hard" for tabs

--
-- DATADIR is the location of the installed Lite XL Lua code, default color
-- schemes and fonts.
-- USERDIR is the location of the Lite XL configuration directory.
--
-- font names used by lite:
-- style.font          : user interface
-- style.big_font      : big text in welcome screen
-- style.icon_font     : icons
-- style.icon_big_font : toolbar icons
-- style.code_font     : code
--
-- the function to load the font accept a 3rd optional argument like:
--
-- {antialiasing="grayscale", hinting="full", bold=true, italic=true, underline=true, smoothing=true, strikethrough=true}
--
-- possible values are:
-- antialiasing: grayscale, subpixel
-- hinting: none, slight, full
-- bold: true, false
-- italic: true, false
-- underline: true, false
-- smoothing: true, false
-- strikethrough: true, false

------------------------------ Plugins ----------------------------------------

-- disable plugin loading setting config entries:

-- disable plugin detectindent, otherwise it is enabled by default:
-- config.plugins.detectindent = false

---------------------------- Miscellaneous -------------------------------------

-- modify list of files to ignore when indexing the project:
-- config.ignore_files = {
--   -- folders
--   "^%.svn/",        "^%.git/",   "^%.hg/",        "^CVS/", "^%.Trash/", "^%.Trash%-.*/",
--   "^node_modules/", "^%.cache/", "^__pycache__/",
--   -- files
--   "%.pyc$",         "%.pyo$",       "%.exe$",        "%.dll$",   "%.obj$", "%.o$",
--   "%.a$",           "%.lib$",       "%.so$",         "%.dylib$", "%.ncb$", "%.sdf$",
--   "%.suo$",         "%.pdb$",       "%.idb$",        "%.class$", "%.psd$", "%.db$",
--   "^desktop%.ini$", "^%.DS_Store$", "^%.directory$",
-- }

